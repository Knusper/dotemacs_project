#+TITLE: Knusper's Emacs configuration
#+OPTIONS: toc:4 h:4

* Configuration

Somewhat inspired by [[http://sach.ac/dotemacs][Sacha Chua's Emacs configuration]]. 

** Init file
   
   We still need an [[http://www.emacswiki.org/emacs/InitFile][Init File]] (=~/.emacs.d/init.el= or =~/.emacs=)
   that loads =org-mode=, sets up the paths for packages that we don't
   install via the package manager.
   
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; ~/.emacs.d/init.el

     ;; This sets up the load path so that we can override it
     (package-initialize nil)
     (add-to-list 'load-path (expand-file-name "~/emacs-scripts/"))
     ;; org-mode
     (add-to-list 'load-path (expand-file-name "~/emacs-scripts/org-8.3.4/lisp/"))
     ;; auctex
     (add-to-list 'load-path "~/.emacs.d/site-lisp/auctex")
     (load "auctex.el" nil t t)
     (load "preview-latex.el" nil t t)

     ;; Load the rest of the packages
     (package-initialize nil)
     (setq package-enable-at-startup nil)
     (org-babel-load-file "~/dotemacs_project/Knusper.org") 
   #+END_SRC

   Here =org-babel-load-file= loads this file, then uses =org-babel-tangle=
   to extract all =emacs-lisp= code into =Knusper.el=, and finally uses
   =load-file= to load it.
  
*** Notes on org-mode installation

    - Just run ~make~
    - Version currently installed: 8.3.4

*** Notes on AucTeX installation
    
    - Download AucTeX from [[https://www.gnu.org/software/auctex/download-for-unix.html]]
    - Compile using ~./configure --prefix=$HOME/.emacs.d/site-lisp/auctex --with-lispdir=$HOME/.emacs.d/site-lisp/auctex --without-texmf-dir~
    - Version currently installed: 11.89
 
*** ☛ TODO Still missing
    - Links to github / html version of my configuration
      
** Personal Information

   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq user-full-name "Edmund Christian Herenz"
           user-mail-address "cherenz@aip.de")
   #+END_SRC
** Packages
*** Package Archives

    MELPA is the king of emacs package archives.  Follow [[https://twitter.com/melpa_emacs][MELPA on Twitter]].
    
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    #+END_SRC

*** List of packages I use

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar my/install-packages
        '(;; appearance
          powerline
          beacon
          zenburn-theme  

          ;; fun
          xkcd
          fireplace
          tea-time
    
          ;; essential
          buffer-move
          smex
          rainbow-delimiters
          htmlize
          iedit  
          auto-complete
          ido
          writeroom-mode
    
          ;; language specific
          markdown-mode
          ;; auctex (I prefer to have always a recent stable release manuaully
          ;; installed)
    
          ;; python 
          jedi
    
          ;; org-mode (I prefer to have always a recent stable release manually
          ;; installed)
          org-bullets
        ))
    #+END_SRC

*** use-package - automatically download and install packages

    We use [[https://github.com/jwiegley/use-package][=use-package=]] to automatically download and install packages,
    if they are not present on the system.  Of course, when firing up
    EMACS for the first time on a fresh system, =use-package= needs to be
    automagically installed first.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (if (not (package-installed-p 'use-package))
          (progn
            (package-refresh-contents)
            (package-install 'use-package)))

      (require 'use-package)
    #+END_SRC

    Now install packages, if not on system:

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar packages-refreshed? nil)

      (dolist (pack my/install-packages)
        (unless (package-installed-p pack)
          (unless packages-refreshed?
            (package-refresh-contents)
            (setq packages-refreshed? t))
          (package-install pack)))    
    #+END_SRC

    (via http://writequit.org/org/settings.html)

*** Packages from Melpa / Elpa
**** zenburn color theme
     
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package zenburn-theme
         :ensure t
         :config
         (load-theme 'zenburn))
     #+END_SRC
     
**** htmlize
     
     http://www.emacswiki.org/emacs/Htmlize

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package htmlize
         :ensure t)     
     #+END_SRC
     
**** xkcd

     https://github.com/vibhavp/emacs-xkcd
     
     [[http://xkcd.com/][xkcd]] reader for Emacs. Nerd on!
     
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package xkcd
        :ensure t
        :defer t)
     #+END_SRC

**** iedit

     Simultaneously edit multiple regions in buffer.
     http://www.emacswiki.org/emacs/Iedit
     
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package iedit
         :ensure t)
     #+END_SRC

**** markdown-mode

     http://jblevins.org/projects/markdown-mode/

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package markdown-mode
         :ensure t
         :init (setq auto-mode-alist
                     (cons '("\\.mdml$" . markdown-mode) auto-mode-alist)))
     #+END_SRC

**** jedi 

     https://tkf.github.io/emacs-jedi/latest/
     
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package jedi
         :ensure t
         )
     #+END_SRC

**** auto-complete

     http://auto-complete.org/

     #+BEGIN_SRC emacs-lisp 
       (use-package auto-complete
         :ensure t
         :config
         (global-auto-complete-mode t) 
         (add-hook 'python-mode-hook 'jedi:setup)
         (setq jedi:setup-keys t)
	)

     #+END_SRC

**** writeroom-mode
     
     Distraction free writing.
     https://github.com/joostkremers/writeroom-mode

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package writeroom-mode
         :ensure t)
     #+END_SRC

**** org-bullets

     The following gold is from
     https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package org-bullets
         :ensure t
         :init
         (setq org-bullets-bullet-list
               '("◉" "◎" "⚫" "○" "►" "◇"))
         :config
         (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
         )
       (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
       (sequence "⚑ WAITING(w)" "|")
       (sequence "|" "✘ CANCELED(c)")))
     #+END_SRC

**** tea-time

     With =tea-time= I never forget about the tea.  Using  [[http://movie-sounds.org/action-movie-sound-clips/the-italian-job-1969/have-a-cup-of-tea-ready][this soundbite]]
     from my favorite movie "The Italian Job".

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package tea-time
         :ensure t
         :config
         (setq tea-time-sound "~/.sounds/tea.ogg")
         (setq tea-time-sound-command "ogg123 -q %s")
         )
     #+END_SRC

**** ebib
     
     Browse / edit BibTeX bibliographies in emacs.
     http://ebib.sourceforge.net/

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package ebib
         :ensure t
       )
     #+END_SRC

**** fireplace
     
     It can get cold in winter. =M-x fireplace=
     https://github.com/johanvts/emacs-fireplace

*** Packages not in ELPA or MELPA
    
    These packages are in =~/emacs-scripts/= as specfied in the
    load-path in [[Init file]].

**** post-mode for mutt

     http://post-mode.sourceforge.net/

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package post)
     #+END_SRC

**** simple-wiki

     http://www.emacswiki.org/emacs/SimpleWikiMode

     #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package simple-wiki)
     #+END_SRC

**** wikidot mode

     An Emacs mode for editing Wikidot markup 

     https://github.com/infochimps-customers/wikidot-mode

     #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package wikidot-mode)
     #+END_SRC
*** Part of emacs
**** printing
     
     http://www.emacswiki.org/emacs/PrintingPackage
     
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package printing
         :config
         (pr-update-menus t))
     #+END_SRC
     
**** uniquify
     
     Uniquify buffer names. 
     See e.g. [[http://trey-jackson.blogspot.cl/2008/01/emacs-tip-11-uniquify.html][here]] or [[http://www.emacswiki.org/emacs/uniquify][here.]]

     #+BEGIN_SRC emacs-lisp :tangle yes
        (require 'uniquify)
     #+END_SRC
**** Midnight Mode 

     http://www.emacswiki.org/emacs/MidnightMode

     Bury unused buffers after some time (4:30 in the morning).
     
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package midnight
         :config
         (midnight-delay-set 'midnight-delay "4:30am"))
     #+END_SRC
**** Abbrev-mode
     
     http://www.emacswiki.org/emacs/AbbrevMode
     - but currently not used 
     
     #+BEGIN_SRC emacs-lisp :tangle no
       (if (file-exists-p abbrev-file-name)
           (quietly-read-abbrev-file))
       (setq save-abbrevs t)  
       ;; in org-mode, we want expansions with trailing or leading slashes -
       ;; this might need some modification
       (abbrev-table-put org-mode-abbrev-table :regexp "\\(\\\\[a-z0-9@]+\\)")
     #+END_SRC

**** ido-mode

     http://www.emacswiki.org/emacs/InteractivelyDoThings
     Part of Emacs

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package ido
         :ensure t
         :config
         (ido-mode t)
         (setq ido-enable-flex-matching t)
         (setq ido-everywhere t)
         (setq ido-max-prospects 50)
         (setq ido-max-window-height 0.25)
         )
     #+END_SRC


** User Interface
*** Window Configuration

    - no tooltips
    - no toolbar
    - menu yes
    - scroll-bars yes
  
    #+BEGIN_SRC emacs-lisp :tangle yes
      (when window-system
        (tooltip-mode -1)
        (tool-bar-mode -1)
        (menu-bar-mode 1)
        (scroll-bar-mode 1))
    #+END_SRC

*** Various settings
**** move around between windows using C-S-Arrow keys (wind-move)
     #+BEGIN_SRC emacs-lisp :tangle yes
       (global-set-key (kbd "<C-S-up>")     'windmove-up)
       (global-set-key (kbd "<C-S-down>")   'windmove-down)
       (global-set-key (kbd "<C-S-left>")   'windmove-left)
       (global-set-key (kbd "<C-S-right>")  'windmove-right)

     #+END_SRC
**** disable <menu>-key
     #+BEGIN_SRC emacs-lisp :tangle yes
       (global-set-key (kbd "<menu>") 'nil)
     #+END_SRC

**** disable blinking cursor
     #+BEGIN_SRC emacs-lisp :tangle yes
       (blink-cursor-mode 0)
     #+END_SRC

**** disable Shift+Arrow to select text
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq shift-select-mode nil)
     #+END_SRC

**** middle-click pastes at point, not at mouse position
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq mouse-yank-at-point t) 
     #+END_SRC

**** transient-mark-mode
      #+BEGIN_SRC emacs-lisp :tangle yes
       (setq transient-mark-mode t)
     #+END_SRC

**** highlight matching parenthesis based on point
     #+BEGIN_SRC emacs-lisp :tangle yes
       (show-paren-mode t)
     #+END_SRC

**** recent files mode
     #+BEGIN_SRC emacs-lisp :tangle yes
       (recentf-mode 1)
     #+END_SRC

**** Bind hippie-expand to M-<SPC> - Peace!
     #+BEGIN_SRC emacs-lisp :tangle yes
       (global-set-key "\M- " 'hippie-expand)
     #+END_SRC

**** never truncate the lines in my buffer [DISABLED]
     #+BEGIN_SRC emacs-lisp :tangle no
       (setq truncate-lines t)
     #+END_SRC

**** always truncate lines, but never the mini-buffer

     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq truncate-lines t)
       (add-hook 'minibuffer-setup-hook
	     (lambda () (setq truncate-lines nil)))
     #+END_SRC

**** Emacs close confirmation 
     (do not accidentally close emacs)

     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq kill-emacs-query-functions
	     (cons (lambda () (yes-or-no-p "Really Quit Emacs? "))
		   kill-emacs-query-functions))
     #+END_SRC

**** enable disabled command - upcase region

     #+BEGIN_SRC emacs-lisp :tangle yes
       (put 'upcase-region 'disabled nil)
     #+END_SRC

**** desktop-save-mode 

     (see Sect. 42 "Saving Emacs Sessions" in Emacs
     User Manual)

     #+BEGIN_SRC emacs-lisp :tangle yes
       (desktop-save-mode 1)
       (setq desktop-restore-eager 10)
       (setq desktop-save t) ;; save without asking
     #+END_SRC

**** user ibuffer insted of list-buffers

     #+BEGIN_SRC emacs-lisp :tangle yes
       (defalias 'list-buffers 'ibuffer)
     #+END_SRC

**** eshell-stuff
     em-joc - not used anymore
     #+BEGIN_SRC emacs-lisp :tangle no
        (require 'em-joc)
         (defun eshell/info (subject)
           "Read the Info manual on SUBJECT."
           (let ((buf (current-buffer)))
             (Info-directory)
             (let ((node-exists (ignore-errors (Info-menu subject))))
               (if node-exists
                   0
       ;;          We want to switch back to *eshell* if the requested
       ;;          Info manual doesn't exist.
                 (switch-to-buffer buf)
                 (eshell-print (format "There is no Info manual on %s.\n"
                                       subject))
                 1))))
     #+END_SRC
*** Electric Pairs

    #+BEGIN_SRC emacs-lisp :tangle yes
      (electric-pair-mode 1)
      (defvar markdown-electric-pairs '((?* . ?*)) "Electric pairs for markdown-mode.")
      (defun markdown-add-electric-pairs ()
        (setq-local electric-pair-pairs (append electric-pair-pairs markdown-electric-pairs))
        (setq-local electric-pair-text-pairs electric-pair-pairs))
      (add-hook 'markdown-mode-hook 'markdown-add-electric-pairs)
    #+END_SRC

*** Move around between windows (wind-move)

    Move around between windows using C-S-Arrow keys (wind-move). Better
    than pressing repeatedly C-x o. (Seems not to work in org-mode?)
    
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key (kbd "<C-S-up>")     'windmove-up)
      (global-set-key (kbd "<C-S-down>")   'windmove-down)
      (global-set-key (kbd "<C-S-left>")   'windmove-left)
      (global-set-key (kbd "<C-S-right>")  'windmove-right)
    #+END_SRC


** Convenience functions not shipped in emacs
*** Timestamps

    Command to insert timestamps into text - e.g.: 27.10.2015, 12:25
    Inspired from http://emacswiki.org/emacs/InsertingTodaysDate
    
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun timestamp ()
        (interactive)
        (insert (format-time-string "%d.%m.%Y, %H:%M")))
    #+END_SRC

*** Count Words & Characters

    From http://ergoemacs.org/emacs/elisp_count-region.html

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun my-count-words-region (posBegin posEnd)
        "Print number of words and chars in region."
        (interactive "r")
        (message "Counting …")
        (save-excursion
          (let (wordCount charCount)
            (setq wordCount 0)
            (setq charCount (- posEnd posBegin))
            (goto-char posBegin)
            (while (and (< (point) posEnd)
                        (re-search-forward "\\w+\\W*" posEnd t))
              (setq wordCount (1+ wordCount)))

            (message "Words: %d. Chars: %d." wordCount charCount)
            )))
    #+END_SRC

*** Unfill Region / Unfill Paragraph

    Source: http://ergoemacs.org/emacs/emacs_unfill-paragraph.html
    
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun unfill-paragraph ()
        "Replace newline chars in current paragraph by single spaces.
      This command does the inverse of `fill-paragraph'."
        (interactive)
        (let ((fill-column 90002000)) ; 90002000 is just random. you can use `most-positive-fixnum'
          (fill-paragraph nil)))
      (defun unfill-region (start end)
        "Replace newline chars in region by single spaces.
      This command does the inverse of `fill-region'."
        (interactive "r")
        (let ((fill-column 90002000))
          (fill-region start end)))
    #+END_SRC


** Mode-specific settings

   AucTeX + org-mode are installed manually.
   
*** LateX
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq LaTeX-math-menu-unicode t)
      (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
      (require 'reftex)
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t)
      (setq-default TeX-master nil)
      (setq reftex-cite-format 'natbib)
    #+END_SRC
*** Org-Mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq auto-mode-alist
            (cons '("\\.org$" . org-mode) auto-mode-alist))
      (global-set-key "\C-cl" 'org-store-link)
      (global-set-key "\C-ca" 'org-agenda)
      (global-set-key "\C-cb" 'org-iswitchb)
      (setq org-log-done t)
    #+END_SRC

    
