#+TITLE: ECH's Emacs configuration
#+OPTIONS: toc:4 h:4 creator:t 
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="zenburn-code.css" />

* Notes

- Somewhat inspired by [[http://sach.ac/dotemacs][Sacha Chua's Emacs configuration]]. 

* Init file
** Init file - code and notes
   We still need an [[http://www.emacswiki.org/emacs/InitFile][Init File]] (=~/.emacs.d/init.el= or =~/.emacs=)
   that loads =org-mode=, sets up the paths for packages that we don't
   install via the package manager.

   Before starting emacs with this init file, we install org-mode and
   AuCTeX on the system where this ~.emacs~ is delployed.

   When ~org-mode~ is installed, we can open this file and run ~C-c
   C-v C~t~ to tangle this file.

   To tangle the file from the command line:
   #+BEGIN_SRC sh
   emacs --batch -l org Knusper.org -f org-babel-tangle
   #+END_SRC
   
   ~.emacs~ or ~.emacs.d/init.el~
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; ~/.emacs.d/init.el (or ~/.emacs)

     ;; This sets up the load path so that we can override it
     (package-initialize nil)
     (add-to-list 'load-path (expand-file-name "~/emacs-scripts/"))

     ;; org-mode
     (add-to-list 'load-path (expand-file-name "~/emacs-scripts/org-9.2/lisp/"))
     (add-to-list 'load-path "~/emacs-scripts/org-9.2/contrib/lisp" t)
     (eval-after-load "info"
       '(progn
	  (info-initialize)
	  (add-to-list 'Info-directory-list "~/emacs-scripts/org-9.2/doc/")))
     (require 'org-tempo) ;; old-school structure templates

     ;; auctex
     (add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/auctex"))
     (load "auctex.el" nil t t)
     (load "preview-latex.el" nil t t)

     ;; Load the rest of the packages
     (package-initialize nil)
     (setq package-enable-at-startup nil)

     ;; rather than using org-babel-load file I tangle this file (C-c C-v C-t)
     ;; and load it directly
     ;; (load-file "~/Org/dotemacs_project/Knusper.el")  ;; uncomment this line, after this file has been tangled
   #+END_SRC
  
** Notes on org-mode installation

   - Just run ~make~
   - Version currently installed: 9.2

** Notes on AucTeX installation
    
   - Download AucTeX from [[https://www.gnu.org/software/auctex/download-for-unix.html]]
   - Compile using ~./configure --prefix=$HOME/.emacs.d/site-lisp/auctex --with-lispdir=$HOME/.emacs.d/site-lisp/auctex --without-texmf-dir~
   - Version currently installed: 11.89

** General

*** Start the emacs server
    #+BEGIN_SRC emacs-lisp :tangle yes
    (server-start)
    #+END_SRC

*** Load Custom File
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq custom-file "~/.gnu-emacs-custom")
      (load custom-file)
    #+END_SRC

* Personal Information

  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq user-full-name "Edmund Christian Herenz")
  #+END_SRC

* Mode-specific settings
** Notes
   I install AucTeX + org-mode manually, as these are the modes that I
   depend on most for my work.  For this reason I want full control
   over the installation process.

   See also: [[*Notes on org-mode installation][Notes on org-mode installation]] and [[*Notes on AucTeX installation][Notes on AucTeX installation]]
   
** LateX
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq TeX-auto-save t)
     (setq TeX-parse-self t)
     (setq-default TeX-master nil)
     (setq LaTeX-math-menu-unicode t)
     (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
     (require 'reftex)
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
     (setq reftex-plug-into-AUCTeX t)
     (setq reftex-cite-format 'natbib)

     ;; use mupdf as default PDF viewer
     (with-eval-after-load "tex"
       (add-to-list 'TeX-view-program-list '("mupdf" "/usr/bin/mupdf %o"))
       (setcdr (assq 'output-pdf TeX-view-program-selection) '("mupdf")))
   #+END_SRC

** Org-Mode

   org-mode is installed manually ([[*Init file - code and notes][see above]]).  Load org-mode:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'org)  
   #+END_SRC

   Open org-mode files in org-mode:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq auto-mode-alist
	   (cons '("\\.org$" . org-mode) auto-mode-alist))
   #+END_SRC
   Store time when a task is done
   #+begin_src emacs-lisp :tangle yes
     (setq org-log-done t)
   #+end_src

    Latex font-highlight in org-mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (eval-after-load 'org '(setf org-highlight-latex-and-related
	'(latex)))
    #+END_SRC

   Since 9.2 we also need to load org-tempo to have quick acces to
   [[https://orgmode.org/manual/Structure-Templates.html]["structure templates"]]:
   #+begin_src emacs-lisp :tangle yes
     (require 'org-tempo)
   #+end_src

*** Key bindings 

   Reasonable "default" key bindings:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     ;; (global-set-key "\C-cb" 'org-iswitchb)
     (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC

   org-mode defines some key bindings, that override some of my
   personal global key-bindings - these key bindings are disabled here:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (eval-after-load 'org
     (progn
	  ;; these are my windmove key-bindings
	  (define-key org-mode-map (kbd "<C-S-right>") nil)
	  (define-key org-mode-map (kbd "<C-S-left>") nil)
	  (define-key org-mode-map (kbd "<C-S-up>") nil)
	  (define-key org-mode-map (kbd "<C-S-down>") nil)
	  ))
    #+END_SRC

*** Capture Templates
    
    The capture template for bookmarks requires org-cliplink to be installed

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq org-capture-templates
	    '(
	      ("b" "Bookmark" entry (file+headline "~/Org/bookmarks.org" "Bookmarks")
	       "* %(org-cliplink-capture) %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
	      )
	    )
    #+end_src

*** Open png image files with default image viewer on system

    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'org-mode-hook
      '(lambda ()
	     (setq org-file-apps
		   (append '(
			     ("\\.png\\'" . default)
			     ) org-file-apps ))))
    #+END_SRC
*** Set width to inline images

   The following setting enables inline images to be scaled when
   displayed inline (~org-toggle-inline-images~):
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq org-image-actual-width nil)
   #+END_SRC

   Now, put this before an image link to scale it
   ~#+ATTR_ORG: :width 500px~

*** "Ugly" Hack to disable PDFs in links to open in DocView Mode

    This is from http://emacs.stackexchange.com/a/24580/5254 No idea
    why it is so complicated, to have linked PDF files popping up in
    an external viewer (btw., I use [[http://www.mupdf.com/][mupdf]])

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun ensc/mailcap-mime-data-filter (filter)
        ""
        (mapcar (lambda(major)
              (append (list (car major))
                  (remove nil
                      (mapcar (lambda(minor)
      		      (when (funcall filter (car major) (car minor) (cdr minor))
                          minor))
                          (cdr major)))))
      mailcap-mime-data))

      (defun ensc/no-pdf-doc-view-filter (major minor spec)
        (if (and (string= major "application")
       (string= minor "pdf")
       (member '(viewer . doc-view-mode) spec))
      nil
          t))

      (eval-after-load 'mailcap
        '(progn
           (setq mailcap-mime-data
       (ensc/mailcap-mime-data-filter 'ensc/no-pdf-doc-view-filter))))
    #+END_SRC

*** org-agenda-category-icon-alist
     
    Icons in this list visually "pimp-up" the org-mode agenda.  We
    use the symbols provided by the [[*all the icons][all-the-icons package]], which is
    installed further below.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (eval-after-load 'all-the-icons
      '(setq org-agenda-category-icon-alist 
	    `(
	      ("talk"
	       ,(list
		 (all-the-icons-faicon "graduation-cap"  :face 'all-the-icons-red))
	       nil nil :ascent center)
	      ("flight"
	       ,(list
		 (all-the-icons-alltheicon "swift"  :face 'all-the-icons-blue))
	       nil nil :ascent center)
	      ("mail"
	       ,(list
		 (all-the-icons-octicon "mail"  :face 'all-the-icons-yellow))
	       nil nil :ascent center)
	      ("observe"
	       ,(list
		 (all-the-icons-octicon "telescope"  :face 'all-the-icons-lyellow))
	       nil nil :ascent center)
	     )
	    )
      )
    #+end_src

*** COMMENT org-drill

    http://orgmode.org/worg/org-contrib/org-drill.html

    #+BEGIN_SRC emacs-lisp :tangle yes
    (require 'org-drill)
    (setq org-drill-add-random-noise-to-intervals-p t)
    (setq org-drill-leech-method 'warn)
    (setq org-drill-learn-fraction 0.3)
    #+END_SRC
     
**** Skeletons for learning swedish
      
     I learn swedish with respect to german, my native tongue.

***** Phrase
      No grammer associated. Fixed forms, etc.
      #+BEGIN_SRC emacs-lisp :tangle yes
	(define-skeleton swedish-phrase-skeleton
          "Insert swedish phrases in org-drill mode"
          ""
          "** sonst.                                                          :drill:\n"
          "   :PROPERTIES:\n"
          "   :DRILL_CARD_TYPE: hide1cloze\n"
          "   :END:\n"
          "   sv: [" (skeleton-read "svenska: ") "]\n"
          "   de: [" (skeleton-read "deutsch: ") "]\n")
      #+END_SRC

***** Verbs
      Verbs + swedish conjungation.
      #+BEGIN_SRC emacs-lisp :tangle yes
        (define-skeleton swedish-verb-skeleton
          "Insert swedish verbs in org-drill mode"
	  ""
          "** verb                                                            :drill:\n"
          "   :PROPERTIES:\n"
          "   :DRILL_CARD_TYPE: hide1cloze\n"
          "   :END:\n"
          "   sv: [" (skeleton-read "svenska: ") "]\n"
          "   de: [" (skeleton-read "deutsch: ") "]\n"
          "*** konj.\n"
          "    | infinitiv | presens | preteritum | supinum | imperativ |\n"
          "    |-----------+---------+------------+---------+-----------|\n"
          "    |    " _ "       |         |            |         |           |\n")
      #+END_SRC

****** ☛ TODO sv inifinitive can be automatically inserted in table!

***** Nouns
      Nouns + deklination
      #+BEGIN_SRC emacs-lisp :tangle yes
        (define-skeleton swedish-noun-skeleton
          "Insert swedish nouns in org-drill-mode"
          ""
          "** substantiv                                                          :drill:\n"
          "   :PROPERTIES:\n"
          "   :DRILL_CARD_TYPE: hide1cloze\n"
          "   :END:\n"
          "   sv: [" (skeleton-read "svenska: ") "]\n"
          "   de: [" (skeleton-read "deutsch: ") "]\n"
          "*** dekl.\n"
          "    | sing. obestämd | sing. bestämd | pl. obestämd | pl. bestämd |\n"
          "    |----------------+---------------+--------------+-------------|\n"
          "    |    "_"            |               |              |             |\n")
      #+END_SRC

* Packages
** Package Archives

   [[https://melpa.org][MELPA]] is the king of emacs package archives.  Follow [[https://twitter.com/melpa_emacs][MELPA on Twitter]].
    
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   #+END_SRC
** use-package - automatically download and install packages

   We use [[https://github.com/jwiegley/use-package][=use-package=]] to automatically download and install packages,
   if they are not present on the system.  Of course, when firing up
   EMACS for the first time on a fresh system, =use-package= needs to be
   automagically installed first.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (if (not (package-installed-p 'use-package))
         (progn
           (package-refresh-contents)
           (package-install 'use-package)))

     (require 'use-package)
   #+END_SRC


** List of used packages
*** org-mode related
**** org-bullets

     The following gold is from
     https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package org-bullets
         :ensure t
         :init
         (setq org-bullets-bullet-list
	       '("◉" "◎" "⚫" "○" "►" "◇"))
         :config
         (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
         )
       (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
       (sequence "⚑ WAITING(w)" "|")
       (sequence "|" "✘ CANCELED(c)")))
     #+END_SRC

**** orgtbl-aggregate

     *Aggregating a table is creating a new table by computing sums,
     averages, and so on, out of material from the first table.*

     https://github.com/tbanel/orgaggregate

     This really should be part of org-mode at some point.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package orgtbl-aggregate
	 :ensure t)
     #+END_SRC

**** org-cliplink
     
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package org-cliplink
	 :ensure t)
     #+end_src

*** Essential
**** try
     
     /Try is a package that allows you to try out Emacs packages without installing them./
     https://github.com/larstvei/Try

     #+begin_src emacs-lisp :tangle yes
       (use-package try
	 :ensure t
	 )
     #+end_src

**** anaconda-mode
       
     /Code navigation, documentation lookup and completion for Python./
     https://github.com/proofit404/anaconda-mode

     #+begin_src emacs-lisp :tangle yes
       (use-package anaconda-mode
	 :ensure t
	 :config
	 (add-hook 'python-mode-hook 'anaconda-mode)
	 (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
     #+end_src

***** auto-complete for anaconda with company-mode

      #+begin_src emacs-lisp :tangle yes
	(use-package company
	  :ensure t)
	(use-package company-anaconda
	  :ensure t
	  :after company
	  :config
	  (add-to-list 'company-backends 'company-anaconda)
	)
      #+end_src

**** which-key 
       
     https://github.com/justbur/emacs-which-keynn

     #+BEGIN_SRC emacs-lisp
       (use-package which-key
	 :ensure t)
     #+END_SRC

**** ebib

     Ebib: http://joostkremers.github.io/ebib/ (in MELPA)

     Copy of settings copied from ~.gnu_emacs_custom~
       
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package ebib
	 :ensure t
	 :config
	 (setq ebib-index-columns
	       (quote
		(("timestamp" 12 t)
		 ("Entry Key" 20 t)
		 ("Author/Editor" 40 nil)
		 ("Year" 6 t)
		 ("Title" 50 t))))
	 (setq ebib-index-default-sort (quote ("timestamp" . descend)))
	 (setq ebib-index-window-size 28)
	 (setq ebib-preload-bib-files (quote ("~/science_works/bibliography.bib")))
	 (setq ebib-timestamp-format "%Y.%m.%d")
	 (setq ebib-use-timestamp t))
     #+END_SRC

**** bibslurp-ads

     Bibslurp: http://mkmcc.github.io/software/bibslurp.html (in MELPA)

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package bibslurp
	 :ensure t)
     #+END_SRC

**** yascroll-mode

     yascroll.el is Yet Another Scroll Bar Mode for GNU Emacs.
     https://github.com/m2ym/yascroll-el
       
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package yascroll
	 :ensure t
	 :config
	 (global-yascroll-bar-mode 1)
	 (setq yascroll:delay-to-hide 0.8)
	 )
     #+END_SRC

**** magit
       
     [[https://magit.vc]]

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package magit 
	 :ensure t
	 :bind ("C-x g" . magit-status)
	 )
     #+END_SRC

**** diminish

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package diminish
         :ensure t)
     #+END_SRC

**** buffer-move
     
     https://github.com/lukhas/buffer-move

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package buffer-move
         :ensure t
         :config
         (global-set-key (kbd "<S-s-up>")     'buf-move-up)
         (global-set-key (kbd "<S-s-down>")   'buf-move-down)
         (global-set-key (kbd "<S-s-left>")   'buf-move-left)
         (global-set-key (kbd "<S-s-right>")  'buf-move-right)
         )
     #+END_SRC

**** smex

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package smex
         :ensure t
         :config
         (smex-initialize)
         (global-set-key (kbd "M-x") 'smex)
         )
     #+END_SRC

**** rainbow-delimiters
     
     https://www.emacswiki.org/emacs/RainbowDelimiters

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package rainbow-delimiters
         :ensure t
         :config
         (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
         )
     #+END_SRC

**** htmlize
     http://www.emacswiki.org/emacs/Htmlize

**** iedit
     Simultaneously edit multiple regions in buffer.
     http://www.emacswiki.org/emacs/Iedit
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package iedit
	 :ensure t)
     #+END_SRC
**** writeroom-mode
     
     Distraction free writing.
     https://github.com/joostkremers/writeroom-mode

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package writeroom-mode
         :ensure t)
     #+END_SRC

**** markdown-mode

     http://jblevins.org/projects/markdown-mode/

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package markdown-mode
         :ensure t
         :init (setq auto-mode-alist
                     (cons '("\\.mdml$" . markdown-mode) auto-mode-alist)))
     #+END_SRC

***** markdown-toc

      #+BEGIN_SRC emacs-lisp :tangle yes
        (use-package markdown-toc
          :ensure t)
      #+END_SRC

**** pager
     https://github.com/emacsorphanage/pager
     and for the default keybindings
     https://github.com/nflath/pager-default-keybindings
     (the latter depends on the former).

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package pager
         :ensure t)
       (use-package pager-default-keybindings
         :ensure t)
     #+END_SRC

**** uptimes
       
     https://github.com/davep/uptimes.el

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package uptimes
         :ensure t)
     #+END_SRC

**** dired-quicksort
       
     Quick and easy sorting in dired - just press "S".
       
     https://www.topbug.net/blog/2016/08/17/dired-quick-sort-sort-dired-buffers-quickly-in-emacs/

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package dired-quick-sort
         :ensure t
         :init
         (dired-quick-sort-setup))
     #+END_SRC

     With this configuration ~S~ is bound to invoke the ~dired-quick-sort~ [[https://github.com/abo-abo/hydra][hydra]].
       
**** dictionary
       
     http://me.in-berlin.de/~myrkr/dictionary/index.html
       
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package dictionary
	 :ensure t)
     #+END_SRC
       
*** Appearance
**** zenburn colour theme

     https://github.com/bbatsov/zenburn-emacs

     Load zenburn colour theme when starting emacs.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package zenburn-theme
	 :ensure t
	 :config
	 (load-theme 'zenburn))
     #+END_SRC

**** powerline

     https://github.com/milkypostman/powerline

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package powerline
         :ensure t
         :config
         (powerline-default-theme)
         )
     #+END_SRC

**** beacon

     https://github.com/Malabarba/beacon

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package beacon
	 :ensure t
	 :config
	 (beacon-mode 1)
	 (setq beacon-dont-blink-commands nil) ;; always blink
	 ;; (setq beacon-lighter '"Λ") - 
	 (add-to-list 'beacon-dont-blink-major-modes 'Man-mode)
	 (add-to-list 'beacon-dont-blink-major-modes 'shell-mode)
	 (add-to-list 'beacon-dont-blink-major-modes 'inferior-python-mode)
	 (add-to-list 'beacon-dont-blink-major-modes 'xkcd-mode)
	 :diminish beacon-mode
	 )
     #+END_SRC
     
**** all the icons

     https://github.com/domtronn/all-the-icons.el

     #+begin_src emacs-lisp :tangle yes
       (use-package all-the-icons
	 :ensure t)
     #+end_src

     Make sure to not forget to run ~M-x
     all-the-icons-install-fonts~ on a fresh installation.

*** Email
**** muttrc-mode

     Syntax highlighting in [[http://linux.die.net/man/5/muttrc][muttrc file]].

     Was removed from melpa, so currently not available...  There
     appears to be a replacement  https://github.com/neomutt/muttrc-mode-el.
     However, its not in melpa yet ... For now I download it manually and place it in
     [[~/emacs-scripts/]]
       
     #+BEGIN_SRC emacs-lisp :tangle yes
       (autoload 'muttrc-mode "muttrc-mode.el"
	 "Major mode to edit muttrc files" t)
       (setq auto-mode-alist
	     (append '(("muttrc\\'" . muttrc-mode))
		     auto-mode-alist))
     #+END_SRC

     Old - if it is in melpa at some point we use this again
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package muttrc-mode
         :ensure t
         :config
          (setq auto-mode-alist
                   (append '((".muttrc\\'" . muttrc-mode))
                           auto-mode-alist)))
     #+END_SRC

**** offlineimap
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package offlineimap
         :ensure t
	 )
     #+END_SRC

*** Fun
**** xkcd
     https://github.com/vibhavp/emacs-xkcd
     [[http://xkcd.com/][xkcd]] reader for Emacs. Nerd on!

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package xkcd
         :ensure t)
     #+END_SRC

**** fireplace
       
     It can get cold in winter. =M-x fireplace=
     https://github.com/johanvts/emacs-fireplace

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package fireplace
         :ensure t)
     #+END_SRC

**** tea-time

     With =tea-time= I never forget about the tea.  Using  [[http://movie-sounds.org/action-movie-sound-clips/the-italian-job-1969/have-a-cup-of-tea-ready][this soundbite]]
     from my favorite movie "The Italian Job".

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package tea-time
         :ensure t
         :config
         (setq tea-time-sound "~/.sounds/tea.ogg")
         (setq tea-time-sound-command "ogg123 -q %s")
         )
     #+END_SRC

** Packages not in ELPA or MELPA
    
   These packages are in =~/emacs-scripts/= as specfied in the
   load-path in [[Init file]].

*** post-mode for mutt

    http://post-mode.sourceforge.net/

    Note: ~Cheers,~ as a default in ~post-signature-pattern~ is not a
    good idea!

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package post
        :config
        (setq post-signature-pattern "\\(--\\|\\)")
        )
    #+END_SRC

*** simple-wiki

    http://www.emacswiki.org/emacs/SimpleWikiMode

    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package simple-wiki)
    #+END_SRC

*** wikidot mode

    An Emacs mode for editing Wikidot markup 

    https://github.com/infochimps-customers/wikidot-mode

    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package wikidot-mode)
    #+END_SRC
** Part of emacs
*** printing
     
    http://www.emacswiki.org/emacs/PrintingPackage
     
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package printing
        :config
        (pr-update-menus t))
    #+END_SRC
     
*** uniquify
     
    Uniquify buffer names. 
    See e.g. [[http://trey-jackson.blogspot.cl/2008/01/emacs-tip-11-uniquify.html][here]] or [[http://www.emacswiki.org/emacs/uniquify][here.]]

    #+BEGIN_SRC emacs-lisp :tangle yes
       (require 'uniquify)
    #+END_SRC

*** Midnight Mode (disabled)

    http://www.emacswiki.org/emacs/MidnightMode

    Bury unused buffers after some time (4:30 in the morning).
     
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package midnight
        :config
        (midnight-delay-set 'midnight-delay "4:30am"))
    #+END_SRC

*** Abbrev-mode
     
    http://www.emacswiki.org/emacs/AbbrevMode
    - but currently not used 
     
    #+BEGIN_SRC emacs-lisp :tangle no
      (if (file-exists-p abbrev-file-name)
          (quietly-read-abbrev-file))
      (setq save-abbrevs t)  
      ;; in org-mode, we want expansions with trailing or leading slashes -
      ;; this might need some modification
      (abbrev-table-put org-mode-abbrev-table :regexp "\\(\\\\[a-z0-9@]+\\)")
    #+END_SRC

*** ido-mode

    http://www.emacswiki.org/emacs/InteractivelyDoThings
    Part of Emacs

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ido
        :config
        (ido-mode t)
        (setq ido-enable-flex-matching t)
        (setq ido-everywhere t)
        (setq ido-max-prospects 50)
        (setq ido-max-window-height 0.25)
        )
    #+END_SRC

* User Interface
** Window Configuration

   - no tooltips
   - no toolbar
   - no menu
   - no scrollbar
  
   #+BEGIN_SRC emacs-lisp :tangle yes
     (when window-system
       (tooltip-mode -1)
       (tool-bar-mode -1)
       (menu-bar-mode -1)
       (scroll-bar-mode -1))
   #+END_SRC

** Various settings
*** move around between windows using C-S-Arrow keys (wind-move)
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key (kbd "<C-S-up>")     'windmove-up)
      (global-set-key (kbd "<C-S-down>")   'windmove-down)
      (global-set-key (kbd "<C-S-left>")   'windmove-left)
      (global-set-key (kbd "<C-S-right>")  'windmove-right)

    #+END_SRC
*** disable <menu>-key
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key (kbd "<menu>") 'nil)
    #+END_SRC

*** disable blinking cursor
    #+BEGIN_SRC emacs-lisp :tangle yes
      (blink-cursor-mode 0)
    #+END_SRC

*** disable Shift+Arrow to select text
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq shift-select-mode nil)
    #+END_SRC

*** middle-click pastes at point, not at mouse position
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq mouse-yank-at-point t) 
    #+END_SRC

*** transient-mark-mode
     #+BEGIN_SRC emacs-lisp :tangle yes
      (setq transient-mark-mode t)
    #+END_SRC

*** highlight matching parenthesis based on point
    #+BEGIN_SRC emacs-lisp :tangle yes
      (show-paren-mode t)
    #+END_SRC

*** recent files mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (recentf-mode 1)
    #+END_SRC

*** Bind hippie-expand to M-<SPC> - Peace!
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key "\M- " 'hippie-expand)
    #+END_SRC

*** never truncate the lines in my buffer [DISABLED]
    #+BEGIN_SRC emacs-lisp :tangle no
      (setq truncate-lines t)
    #+END_SRC

*** always truncate lines, but never the mini-buffer

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq truncate-lines t)
      (add-hook 'minibuffer-setup-hook
	    (lambda () (setq truncate-lines nil)))
    #+END_SRC

*** Emacs close confirmation 
    (do not accidentally close emacs)

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq kill-emacs-query-functions
	    (cons (lambda () (yes-or-no-p "Really Quit Emacs? "))
		  kill-emacs-query-functions))
    #+END_SRC

*** enable disabled command - upcase region

    #+BEGIN_SRC emacs-lisp :tangle yes
      (put 'upcase-region 'disabled nil)
    #+END_SRC

*** desktop-save-mode 

    (see Sect. 42 "Saving Emacs Sessions" in Emacs
    User Manual)

    #+BEGIN_SRC emacs-lisp :tangle yes
      (desktop-save-mode 1)
      (setq desktop-restore-eager 10)
      (setq desktop-save t) ;; save without asking
    #+END_SRC

*** user ibuffer insted of list-buffers

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defalias 'list-buffers 'ibuffer)
    #+END_SRC

**** adjust ibuffer column widths

     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq ibuffer-formats
             '((mark modified read-only " "
                     (name 30 30 :left :elide) " "
                     (size 9 -1 :right) " "
                     (mode 16 16 :left :elide) " " filename-and-process)
               (mark " " (name 16 -1) " " filename)))
     #+END_SRC
*** eshell-stuff
    em-joc - not used anymore
    #+BEGIN_SRC emacs-lisp :tangle no
       (require 'em-joc)
        (defun eshell/info (subject)
          "Read the Info manual on SUBJECT."
          (let ((buf (current-buffer)))
            (Info-directory)
            (let ((node-exists (ignore-errors (Info-menu subject))))
              (if node-exists
                  0
      ;;          We want to switch back to *eshell* if the requested
      ;;          Info manual doesn't exist.
                (switch-to-buffer buf)
                (eshell-print (format "There is no Info manual on %s.\n"
                                      subject))
                1))))
    #+END_SRC
** Electric Pairs

   #+BEGIN_SRC emacs-lisp :tangle yes
     (electric-pair-mode 1)
     (defvar markdown-electric-pairs '((?* . ?*)) "Electric pairs for markdown-mode.")
     (defun markdown-add-electric-pairs ()
       (setq-local electric-pair-pairs (append electric-pair-pairs markdown-electric-pairs))
       (setq-local electric-pair-text-pairs electric-pair-pairs))
     (add-hook 'markdown-mode-hook 'markdown-add-electric-pairs)
   #+END_SRC

** Move around between windows (wind-move)

   Move around between windows using C-S-Arrow keys (wind-move). Better
   than pressing repeatedly C-x o. (Seems not to work in org-mode?)
    
   #+BEGIN_SRC emacs-lisp :tangle yes
     (global-set-key (kbd "<C-S-up>")     'windmove-up)
     (global-set-key (kbd "<C-S-down>")   'windmove-down)
     (global-set-key (kbd "<C-S-left>")   'windmove-left)
     (global-set-key (kbd "<C-S-right>")  'windmove-right)
   #+END_SRC

* Convenience functions not shipped in emacs
** Timestamps

   Command to insert timestamps into text - e.g.: 27.10.2015, 12:25
   Inspired from http://emacswiki.org/emacs/InsertingTodaysDate
    
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun timestamp ()
       (interactive)
       (insert (format-time-string "%d.%m.%Y, %H:%M")))
   #+END_SRC

** Count Words & Characters

   From http://ergoemacs.org/emacs/elisp_count-region.html

   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun my-count-words-region (posBegin posEnd)
       "Print number of words and chars in region."
       (interactive "r")
       (message "Counting …")
       (save-excursion
         (let (wordCount charCount)
           (setq wordCount 0)
           (setq charCount (- posEnd posBegin))
           (goto-char posBegin)
           (while (and (< (point) posEnd)
                       (re-search-forward "\\w+\\W*" posEnd t))
             (setq wordCount (1+ wordCount)))

           (message "Words: %d. Chars: %d." wordCount charCount)
           )))
   #+END_SRC

** Unfill Region / Unfill Paragraph

   Source: http://ergoemacs.org/emacs/emacs_unfill-paragraph.html
    
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun unfill-paragraph ()
       "Replace newline chars in current paragraph by single spaces.
     This command does the inverse of `fill-paragraph'."
       (interactive)
       (let ((fill-column 90002000)) ; 90002000 is just random. you can use `most-positive-fixnum'
         (fill-paragraph nil)))
     (defun unfill-region (start end)
       "Replace newline chars in region by single spaces.
     This command does the inverse of `fill-region'."
       (interactive "r")
       (let ((fill-column 90002000))
         (fill-region start end)))
   #+END_SRC
    
    
    
